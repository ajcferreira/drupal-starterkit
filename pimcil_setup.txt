Step-by-Step Capacitor Implementation Guide

Phase 1: Export and Setup Your Project Locally
	Step 1: Export to GitHub

	Step 2: Clone Locally

		# Clone your newly created repository
		git clone https://github.com/your-username/your-repo-name.git
		cd your-repo-name

		# Install dependencies
		npm install

Phase 2: Install and Configure Capacitor
	Step 3: Install Capacitor Dependencies

		# Install Capacitor core packages
		npm install @capacitor/core @capacitor/cli

		# Install platform-specific packages
		npm install @capacitor/ios @capacitor/android
		
		# Install push notifications
		npm install @capacitor/push-notifications
		
		# Install Icons generator
		npm install @capacitor/assets --save-dev
		
		# Install Push Notifications
		npm install @capacitor/push-notifications
		
	Step 4: Initialize Capacitor

		# Initialize Capacitor in your project
		npx cap init
		When prompted, use these values:
	

		App Name: Pimcil
		App ID: app.lovable.8e6cff07715445de86de4f1bfaa183fb
		Web Directory: dist (this is where Vite builds to)
		
	Step 5: Create Capacitor Configuration This creates a capacitor.config.ts file. Update it with:

		import { CapacitorConfig } from '@capacitor/cli';

		const config: CapacitorConfig = {
		  appId: 'app.lovable.8e6cff07715445de86de4f1bfaa183fb',
		  appName: 'Pimcil',
		  webDir: 'dist',
		  server: {
			// For development - remove for production
			url: 'https://8e6cff07-7154-45de-86de-4f1bfaa183fb.lovableproject.com?forceHideBadge=true',
			cleartext: true
		  },
		  plugins: {
			Camera: {
			  permissions: ['camera']
			},
			PushNotifications: {
			  presentationOptions: ['badge', 'sound', 'alert']
			}
		  }
		};

		export default config;

Phase 3: Build and Add Platforms
	Step 6: Build Your Web App

		# Build the production version
		npm run build
		
	Step 7: Add Mobile Platforms

		# Add iOS platform (requires macOS)
		npx cap add ios

		# Add Android platform
		npx cap add android
		
		# Configure Native Permissions
			Android Permissions (android/app/src/main/AndroidManifest.xml):

			<uses-permission android:name="android.permission.CAMERA" />
			<uses-permission android:name="android.permission.INTERNET" />
			<uses-permission android:name="android.permission.WAKE_LOCK" />
			<uses-permission android:name="android.permission.VIBRATE" />
			<uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
			
			iOS Permissions (ios/App/App/Info.plist):

			<key>NSCameraUsageDescription</key>
			<string>This app needs camera access to scan product barcodes</string>
			<key>NSMicrophoneUsageDescription</key>
			<string>This app needs microphone access for video recording</string>
	
Phase 4: Configure for Mobile

	Step 8: Update Package.json Scripts Add these scripts to your package.json:

		{
		  "scripts": {
			// ... existing scripts
			"cap:sync": "npx cap sync",
			"cap:open:ios": "npx cap open ios",
			"cap:open:android": "npx cap open android",
			"cap:run:ios": "npx cap run ios",
			"cap:run:android": "npx cap run android"
		  }
		}

	Step 9: Sync Project to Native Platforms
		
		# Sync web assets to native projects
		npx cap sync
		
		# Generate Pictos
		npx capacitor-assets generate
		
Phase 5: Platform-Specific Setup

	For Android Development:

		Step 10a: Install Android Studio

			Download and install Android Studio
			Open Android Studio and install SDK components
			Create an Android Virtual Device (AVD) or connect a physical device
			
		Step 11a: Open Android Project

			# Open the Android project in Android Studio
			npx cap open android
			
		Step 12a: Run on Android

			# Run on Android device/emulator
			npx cap run android
		
	For iOS Development (macOS only):

		Step 10b: Install Xcode

			Install Xcode from the Mac App Store
			Install Xcode command line tools: xcode-select --install
			Step 11b: Open iOS Project


			# Open the iOS project in Xcode
			npx cap open ios
			
		Step 12b: Run on iOS

		# Run on iOS simulator/device
		npx cap run ios

Phase 6: Handle Mobile-Specific Considerations

	Step 13: Update Supabase Configuration Your Supabase URLs might need adjustment for mobile. Update your src/integrations/supabase/client.ts if needed:

		// Make sure your Supabase URL is accessible from mobile devices
		const supabaseUrl = 'https://vytjqpqnhjovndydtavd.supabase.co'
		const supabaseAnonKey = 'your-anon-key'

	Step 14: Test Key Features Test these critical features on mobile:

		Authentication (login/signup)
		Product browsing
		Cart functionality
		Offline capabilities (if needed)

Phase 7: Production Configuration

	Step 15: Remove Development Server For production builds, remove the server section from capacitor.config.ts:

		const config: CapacitorConfig = {
		  appId: 'app.lovable.8e6cff07715445de86de4f1bfaa183fb',
		  appName: 'Pimcil',
		  webDir: 'dist',
		  // Remove server section for production
		};

	Step 16: Build for Production

		# Build production version
		npm run build

		# Sync changes to native platforms
		npx cap sync

		# Build for production
		npx cap run android --prod
		npx cap run ios --prod
		
Phase 8: Adding Native Features (Optional)
	
	If you want to add native capabilities like push notifications, camera access, etc.:

	# Example: Add push notifications
	npm install @capacitor/push-notifications

	# Add to your capacitor.config.ts
	plugins: {
	  PushNotifications: {
		presentationOptions: ["badge", "sound", "alert"]
	  }
	}
	
Important Notes:
Development vs Production: The server URL in the config is for development only - remove it for production builds

Hot Reload: With the development server URL, changes in Lovable will automatically update in your mobile app

Platform Requirements:

iOS: Requires macOS with Xcode
Android: Works on Windows, macOS, or Linux with Android Studio
Supabase: Your existing Supabase integration will work seamlessly in the mobile app

PWA vs Native: This gives you a true native app that can be distributed through app stores, unlike PWA

Would you like me to elaborate on any specific step or help you troubleshoot any issues you encounter during the implementation?